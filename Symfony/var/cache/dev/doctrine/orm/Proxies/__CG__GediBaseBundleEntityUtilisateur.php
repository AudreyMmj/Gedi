<?php

namespace Proxies\__CG__\Gedi\BaseBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Utilisateur extends \Gedi\BaseBundle\Entity\Utilisateur implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idUtilisateur', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'username', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'password', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'nom', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'prenom', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'salt', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'role', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'actif', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'dateCreation', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'dateModification', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idDocumentDu', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idGroupeUg'];
        }

        return ['__isInitialized__', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idUtilisateur', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'username', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'password', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'nom', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'prenom', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'salt', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'role', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'actif', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'dateCreation', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'dateModification', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idDocumentDu', '' . "\0" . 'Gedi\\BaseBundle\\Entity\\Utilisateur' . "\0" . 'idGroupeUg'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Utilisateur $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdUtilisateur()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdUtilisateur();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdUtilisateur', []);

        return parent::getIdUtilisateur();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', [$username]);

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenom($prenom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenom', [$prenom]);

        return parent::setPrenom($prenom);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenom', []);

        return parent::getPrenom();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', [$role]);

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', []);

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setActif($actif)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActif', [$actif]);

        return parent::setActif($actif);
    }

    /**
     * {@inheritDoc}
     */
    public function getActif()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActif', []);

        return parent::getActif();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreation($dateCreation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreation', [$dateCreation]);

        return parent::setDateCreation($dateCreation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreation', []);

        return parent::getDateCreation();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateModification($dateModification)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateModification', [$dateModification]);

        return parent::setDateModification($dateModification);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateModification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateModification', []);

        return parent::getDateModification();
    }

    /**
     * {@inheritDoc}
     */
    public function addIdDocumentDu(\Gedi\BaseBundle\Entity\Document $idDocumentDu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIdDocumentDu', [$idDocumentDu]);

        return parent::addIdDocumentDu($idDocumentDu);
    }

    /**
     * {@inheritDoc}
     */
    public function removeIdDocumentDu(\Gedi\BaseBundle\Entity\Document $idDocumentDu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeIdDocumentDu', [$idDocumentDu]);

        return parent::removeIdDocumentDu($idDocumentDu);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdDocumentDu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdDocumentDu', []);

        return parent::getIdDocumentDu();
    }

    /**
     * {@inheritDoc}
     */
    public function addIdGroupeUg(\Gedi\BaseBundle\Entity\Groupe $idGroupeUg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addIdGroupeUg', [$idGroupeUg]);

        return parent::addIdGroupeUg($idGroupeUg);
    }

    /**
     * {@inheritDoc}
     */
    public function removeIdGroupeUg(\Gedi\BaseBundle\Entity\Groupe $idGroupeUg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeIdGroupeUg', [$idGroupeUg]);

        return parent::removeIdGroupeUg($idGroupeUg);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdGroupeUg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdGroupeUg', []);

        return parent::getIdGroupeUg();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

}
